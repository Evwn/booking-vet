@page "/login"
@using Microsoft.AspNetCore.Authentication
@using Microsoft.AspNetCore.Identity
@using SimpleVetBooking.Data.Models
@using System.ComponentModel.DataAnnotations
@using SimpleVetBooking.Components.Account
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop
@using Microsoft.AspNetCore.WebUtilities
@using Microsoft.EntityFrameworkCore
@inject SignInManager<AppUser> SignInManager
@inject UserManager<AppUser> UserManager
@inject SimpleVetBooking.Data.ApplicationDbContext DbContext
@inject ILogger<Login> Logger
@inject NavigationManager NavigationManager
@inject IJSRuntime JSRuntime

<PageTitle>Log in</PageTitle>

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-6">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h2 class="text-center mb-0">Log in</h2>
                </div>
                <div class="card-body">
                    <StatusMessage />
                    <div class="row">
                        <div class="col">
                            <EditForm Model="Input" method="post" OnValidSubmit="OnValidSubmitAsync" FormName="login">
                                <DataAnnotationsValidator />
                                <ValidationSummary class="text-danger" role="alert" />
                                
                                @if (!string.IsNullOrEmpty(ErrorMessage))
                                {
                                    <div class="alert alert-danger" role="alert">
                                        @ErrorMessage
                                    </div>
                                }
                                
                                <div class="form-floating mb-3">
                                    <InputText @bind-Value="Input.Email" class="form-control" autocomplete="username" aria-required="true" placeholder="name@example.com" />
                                    <label for="email">Email</label>
                                    <ValidationMessage For="() => Input.Email" class="text-danger" />
                                </div>
                                
                                <div class="form-floating mb-3">
                                    <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="current-password" aria-required="true" placeholder="password" />
                                    <label for="password">Password</label>
                                    <ValidationMessage For="() => Input.Password" class="text-danger" />
                                </div>
                                
                                <div class="checkbox mb-3">
                                    <label>
                                        <InputCheckbox @bind-Value="Input.RememberMe" /> Remember me
                                    </label>
                                </div>
                                
                                <div class="d-grid gap-2">
                                    <button type="submit" class="btn btn-lg btn-primary" disabled="@IsLoading">
                                        @if (IsLoading)
                                        {
                                            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
                                            <span class="ms-2">Logging in...</span>
                                        }
                                        else
                                        {
                                            <span>Log in</span>
                                        }
                                    </button>
                                </div>
                            </EditForm>
                        </div>
                    </div>
                    
                    <div class="mt-4 text-center">
                        <p>
                            <a href="register">Register as a new user</a>
                        </p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? ErrorMessage { get; set; }
    private bool IsLoading { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        // If the user is already logged in, redirect them away
        if (SignInManager.IsSignedIn(HttpContext.User))
        {
            NavigationManager.NavigateTo("/", true);
            return;
        }

        if (HttpMethods.IsGet(HttpContext.Request.Method))
        {
            // Clear the existing external cookie to ensure a clean login process
            await HttpContext.SignOutAsync(IdentityConstants.ExternalScheme);
        }
    }

    public async Task OnValidSubmitAsync()
    {
        try
        {
            IsLoading = true;
            StateHasChanged();
            
            // This doesn't count login failures towards account lockout
            // To enable password failures to trigger account lockout, set lockoutOnFailure: true
            var result = await SignInManager.PasswordSignInAsync(Input.Email, Input.Password, Input.RememberMe, lockoutOnFailure: false);
            
            if (result.Succeeded)
            {
                Logger.LogInformation("User logged in.");
                
                // Get the user to check if they are a veterinarian
                var user = await UserManager.FindByEmailAsync(Input.Email);
                string redirectUrl = ReturnUrl ?? "/";
                
                // If user is a veterinarian, redirect to the vet dashboard
                if (user != null && user.IsVeterinarian)
                {
                    redirectUrl = "/vet/dashboard";
                    Logger.LogInformation($"Redirecting veterinarian {user.Email} to dashboard");
                }
                
                // Set a success cookie
                HttpContext.Response.Cookies.Append("Identity.StatusMessage", "You have successfully logged in.");
                
                // Reset loading state first
                IsLoading = false;
                
                // Use direct HTTP response redirect
                HttpContext.Response.Redirect(redirectUrl);
                return;
            }
            else if (result.RequiresTwoFactor)
            {
                // Use direct HTTP response redirect
                HttpContext.Response.Redirect("/login-with-2fa");
                return;
            }
            else if (result.IsLockedOut)
            {
                Logger.LogWarning("User account locked out.");
                // Use direct HTTP response redirect
                HttpContext.Response.Redirect("/lockout");
                return;
            }
            else
            {
                ErrorMessage = "Invalid login attempt. Please check your email and password.";
                IsLoading = false;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error during login: {ex.Message}";
            IsLoading = false;
            StateHasChanged();
        }
    }

    private sealed class InputModel
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; } = "";

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = "";

        [Display(Name = "Remember me?")]
        public bool RememberMe { get; set; }
    }
} 