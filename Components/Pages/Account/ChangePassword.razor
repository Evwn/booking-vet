@page "/account/change-password"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using SimpleVetBooking.Data
@using SimpleVetBooking.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject UserManager<AppUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>Change Password</PageTitle>

<div class="container my-5">
    <h1 class="mb-4">Change Password</h1>

    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (user == null)
    {
        <div class="alert alert-danger">
            <h4 class="alert-heading">User Not Found</h4>
            <p>We couldn't find your user profile. Please log out and log back in.</p>
            <a href="/logout" class="btn btn-primary">Logout</a>
        </div>
    }
    else
    {
        <div class="row">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">Update Your Password</h4>
                    </div>
                    <div class="card-body">
                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                                <strong>Error!</strong> @errorMessage
                                <button type="button" class="btn-close" @onclick="() => errorMessage = null"></button>
                            </div>
                        }
                        
                        @if (showSuccessMessage)
                        {
                            <div class="alert alert-success alert-dismissible fade show" role="alert">
                                <strong>Success!</strong> Your password has been updated.
                                <button type="button" class="btn-close" @onclick="() => showSuccessMessage = false"></button>
                            </div>
                        }
                        
                        <form @onsubmit="ChangePasswordAsync">
                            <div class="mb-3">
                                <label class="form-label">Current Password</label>
                                <input type="password" class="form-control" @bind="currentPassword" required>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">New Password</label>
                                <input type="password" class="form-control" @bind="newPassword" required>
                                <div class="form-text">
                                    Password must be at least 8 characters long and include at least one uppercase letter, 
                                    one lowercase letter, one number, and one special character.
                                </div>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Confirm New Password</label>
                                <input type="password" class="form-control" @bind="confirmPassword" required>
                            </div>
                            
                            <div class="d-flex justify-content-between">
                                <a href="/account/profile" class="btn btn-outline-secondary">
                                    <i class="bi bi-arrow-left me-2"></i>Back to Profile
                                </a>
                                <button type="submit" class="btn btn-primary" disabled="@isProcessing">
                                    @if (isProcessing)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2" role="status" aria-hidden="true"></span>
                                        <span>Processing...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-check-circle me-2"></i>
                                        <span>Update Password</span>
                                    }
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
            
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="mb-0">Password Security Tips</h4>
                    </div>
                    <div class="card-body">
                        <ul class="list-group list-group-flush">
                            <li class="list-group-item">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                Use a unique password for your veterinary account
                            </li>
                            <li class="list-group-item">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                Include a mix of letters, numbers, and symbols
                            </li>
                            <li class="list-group-item">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                Avoid using personal information in your password
                            </li>
                            <li class="list-group-item">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                Consider using a password manager for secure storage
                            </li>
                            <li class="list-group-item">
                                <i class="bi bi-check-circle-fill text-success me-2"></i>
                                Change your password regularly, especially after suspected security incidents
                            </li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

@code {
    private bool loading = true;
    private bool showSuccessMessage = false;
    private bool isProcessing = false;
    private AppUser? user;
    private string? errorMessage;
    
    private string currentPassword = "";
    private string newPassword = "";
    private string confirmPassword = "";
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var claimsPrincipal = authState.User;
            
            if (claimsPrincipal.Identity?.IsAuthenticated != true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            var userId = claimsPrincipal.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            if (string.IsNullOrEmpty(userId))
            {
                return;
            }
            
            // Get the user
            user = await UserManager.FindByIdAsync(userId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading user profile: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task ChangePasswordAsync()
    {
        try
        {
            if (user == null) return;
            
            isProcessing = true;
            errorMessage = null;
            
            // Validate password inputs
            if (string.IsNullOrEmpty(currentPassword) || 
                string.IsNullOrEmpty(newPassword) || 
                string.IsNullOrEmpty(confirmPassword))
            {
                errorMessage = "All fields are required.";
                return;
            }
            
            if (newPassword != confirmPassword)
            {
                errorMessage = "New password and confirmation do not match.";
                return;
            }
            
            // Check if new password meets complexity requirements
            if (newPassword.Length < 8)
            {
                errorMessage = "Password must be at least 8 characters long.";
                return;
            }
            
            // Use ASP.NET Identity to change the password
            var changePasswordResult = await UserManager.ChangePasswordAsync(user, currentPassword, newPassword);
            
            if (changePasswordResult.Succeeded)
            {
                // Reset form fields
                currentPassword = "";
                newPassword = "";
                confirmPassword = "";
                
                // Show success message
                showSuccessMessage = true;
            }
            else
            {
                // Display the first error message
                errorMessage = changePasswordResult.Errors.FirstOrDefault()?.Description ?? 
                    "Failed to change password. Please ensure your current password is correct.";
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Error changing password: {ex.Message}");
        }
        finally
        {
            isProcessing = false;
        }
    }
} 