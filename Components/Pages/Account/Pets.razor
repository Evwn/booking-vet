@page "/account/pets"
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SimpleVetBooking.Data
@using SimpleVetBooking.Data.Models
@using System.Security.Claims
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@inject ApplicationDbContext DbContext
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager NavigationManager

<PageTitle>My Pets</PageTitle>

<div class="container my-5">
    <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>My Pets</h1>
        <button class="btn btn-primary" @onclick="() => ShowAddPetModal()">
            <i class="bi bi-plus-circle me-2"></i>Add New Pet
        </button>
    </div>

    @if (loading)
    {
        <div class="d-flex justify-content-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
    }
    else if (pets.Count == 0)
    {
        <div class="card">
            <div class="card-body text-center py-5">
                <i class="bi bi-emoji-smile display-1 text-muted mb-3"></i>
                <h3>No pets yet</h3>
                <p class="text-muted">Add your first pet to get started with appointments</p>
                <button class="btn btn-primary mt-3" @onclick="() => ShowAddPetModal()">
                    <i class="bi bi-plus-circle me-2"></i>Add New Pet
                </button>
            </div>
        </div>
    }
    else
    {
        <div class="row row-cols-1 row-cols-md-2 row-cols-lg-3 g-4">
            @foreach (var pet in pets)
            {
                <div class="col">
                    <div class="card h-100">
                        <div class="card-header bg-light d-flex justify-content-between align-items-center">
                            <h5 class="mb-0">@pet.Name</h5>
                            <span class="badge bg-primary">@pet.Species</span>
                        </div>
                        <div class="card-body">
                            <div class="text-center mb-3">
                                <div style="width: 100px; height: 100px; background-color: #e9ecef; border-radius: 50%; display: inline-flex; align-items: center; justify-content: center; font-size: 3rem; color: #adb5bd;">
                                    <i class="bi bi-bug"></i>
                                </div>
                            </div>
                            
                            <dl class="row mb-0">
                                <dt class="col-sm-4">Species:</dt>
                                <dd class="col-sm-8">@pet.Species</dd>
                                
                                <dt class="col-sm-4">Breed:</dt>
                                <dd class="col-sm-8">@pet.Breed</dd>
                                
                                <dt class="col-sm-4">Age:</dt>
                                <dd class="col-sm-8">@CalculateAge(pet.DateOfBirth) years</dd>
                                
                                <dt class="col-sm-4">Birth Date:</dt>
                                <dd class="col-sm-8">@pet.DateOfBirth.ToString("MMM d, yyyy")</dd>
                            </dl>
                        </div>
                        <div class="card-footer">
                            <div class="d-flex justify-content-between">
                                <button class="btn btn-outline-primary btn-sm" @onclick="() => ShowEditPetModal(pet)">
                                    <i class="bi bi-pencil me-1"></i> Edit
                                </button>
                                <button class="btn btn-outline-danger btn-sm" @onclick="() => ConfirmDeletePet(pet)">
                                    <i class="bi bi-trash me-1"></i> Delete
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            }
        </div>
    }
    
    <!-- Add/Edit Pet Modal -->
    @if (showPetModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">@(editingPet ? "Edit Pet" : "Add New Pet")</h5>
                        <button type="button" class="btn-close" @onclick="ClosePetModal"></button>
                    </div>
                    <div class="modal-body">
                        <form>
                            <div class="mb-3">
                                <label class="form-label">Pet Name</label>
                                <input type="text" class="form-control" @bind="currentPet.Name" required />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Species</label>
                                <select class="form-select" @bind="currentPet.Species">
                                    <option value="Dog">Dog</option>
                                    <option value="Cat">Cat</option>
                                    <option value="Bird">Bird</option>
                                    <option value="Rabbit">Rabbit</option>
                                    <option value="Hamster">Hamster</option>
                                    <option value="Guinea Pig">Guinea Pig</option>
                                    <option value="Fish">Fish</option>
                                    <option value="Reptile">Reptile</option>
                                    <option value="Other">Other</option>
                                </select>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Breed</label>
                                <input type="text" class="form-control" @bind="currentPet.Breed" required />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Date of Birth</label>
                                <input type="date" class="form-control" @bind="currentPet.DateOfBirth" required />
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Medical History</label>
                                <textarea class="form-control" rows="3" @bind="currentPet.MedicalHistory"></textarea>
                                <div class="form-text">Include any relevant medical information, allergies, or special needs.</div>
                            </div>
                        </form>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="ClosePetModal">Cancel</button>
                        <button type="button" class="btn btn-primary" @onclick="SavePet">
                            @if (saving)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save Pet</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
    
    <!-- Delete Confirmation Modal -->
    @if (showDeleteModal)
    {
        <div class="modal fade show" style="display: block;" tabindex="-1" role="dialog">
            <div class="modal-dialog" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Confirm Delete</h5>
                        <button type="button" class="btn-close" @onclick="() => showDeleteModal = false"></button>
                    </div>
                    <div class="modal-body">
                        <p>Are you sure you want to delete <strong>@petToDelete?.Name</strong>?</p>
                        <p class="text-danger">This action cannot be undone.</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" @onclick="() => showDeleteModal = false">Cancel</button>
                        <button type="button" class="btn btn-danger" @onclick="DeletePet">
                            @if (deleting)
                            {
                                <span class="spinner-border spinner-border-sm me-1" role="status" aria-hidden="true"></span>
                                <span>Deleting...</span>
                            }
                            else
                            {
                                <span>Delete Pet</span>
                            }
                        </button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal-backdrop fade show"></div>
    }
</div>

@code {
    private bool loading = true;
    private List<Pet> pets = new();
    private string? userId;
    
    // Modal state
    private bool showPetModal = false;
    private bool editingPet = false;
    private Pet currentPet = new();
    private bool saving = false;
    
    // Delete confirmation
    private bool showDeleteModal = false;
    private Pet? petToDelete;
    private bool deleting = false;
    
    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            
            if (!user.Identity?.IsAuthenticated ?? true)
            {
                NavigationManager.NavigateTo("/login");
                return;
            }
            
            userId = user.FindFirst(ClaimTypes.NameIdentifier)?.Value;
            
            if (!string.IsNullOrEmpty(userId))
            {
                await LoadPets();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing pets page: {ex.Message}");
        }
        finally
        {
            loading = false;
        }
    }
    
    private async Task LoadPets()
    {
        if (string.IsNullOrEmpty(userId)) return;
        
        try
        {
            pets = await DbContext.Pets
                .Where(p => p.OwnerId == userId)
                .ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading pets: {ex.Message}");
        }
    }
    
    private void ShowAddPetModal()
    {
        currentPet = new Pet
        {
            OwnerId = userId,
            DateOfBirth = DateTime.Today.AddYears(-1)
        };
        editingPet = false;
        showPetModal = true;
    }
    
    private void ShowEditPetModal(Pet pet)
    {
        currentPet = new Pet
        {
            Id = pet.Id,
            OwnerId = pet.OwnerId,
            Name = pet.Name,
            Species = pet.Species,
            Breed = pet.Breed,
            DateOfBirth = pet.DateOfBirth,
            MedicalHistory = pet.MedicalHistory
        };
        editingPet = true;
        showPetModal = true;
    }
    
    private void ClosePetModal()
    {
        showPetModal = false;
    }
    
    private async Task SavePet()
    {
        if (string.IsNullOrWhiteSpace(currentPet.Name) || 
            string.IsNullOrWhiteSpace(currentPet.Species) || 
            string.IsNullOrWhiteSpace(currentPet.Breed))
        {
            // Display validation error
            return;
        }
        
        saving = true;
        
        try
        {
            if (editingPet)
            {
                // Update existing pet
                var pet = await DbContext.Pets.FindAsync(currentPet.Id);
                if (pet != null && pet.OwnerId == userId)
                {
                    pet.Name = currentPet.Name;
                    pet.Species = currentPet.Species;
                    pet.Breed = currentPet.Breed;
                    pet.DateOfBirth = currentPet.DateOfBirth;
                    pet.MedicalHistory = currentPet.MedicalHistory;
                    
                    DbContext.Pets.Update(pet);
                    await DbContext.SaveChangesAsync();
                }
            }
            else
            {
                // Add new pet
                DbContext.Pets.Add(currentPet);
                await DbContext.SaveChangesAsync();
            }
            
            // Refresh pet list
            await LoadPets();
            
            // Close modal
            showPetModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error saving pet: {ex.Message}");
        }
        finally
        {
            saving = false;
        }
    }
    
    private void ConfirmDeletePet(Pet pet)
    {
        petToDelete = pet;
        showDeleteModal = true;
    }
    
    private async Task DeletePet()
    {
        if (petToDelete == null) return;
        
        deleting = true;
        
        try
        {
            var pet = await DbContext.Pets.FindAsync(petToDelete.Id);
            if (pet != null && pet.OwnerId == userId)
            {
                DbContext.Pets.Remove(pet);
                await DbContext.SaveChangesAsync();
                
                // Refresh pet list
                await LoadPets();
            }
            
            // Close modal
            showDeleteModal = false;
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error deleting pet: {ex.Message}");
        }
        finally
        {
            deleting = false;
        }
    }
    
    private int CalculateAge(DateTime dateOfBirth)
    {
        var today = DateTime.Today;
        var age = today.Year - dateOfBirth.Year;
        if (dateOfBirth.Date > today.AddYears(-age)) age--;
        return age;
    }
} 