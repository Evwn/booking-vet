@inherits LayoutComponentBase
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SimpleVetBooking.Data
@using SimpleVetBooking.Data.Models
@inject NavigationManager NavigationManager
@inject SimpleVetBooking.Data.ApplicationDbContext DbContext

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
            <div class="d-flex align-items-center">
                
                <AuthorizeView>
                    <Authorized>
                        <div class="dropdown">
                            <button class="btn btn-outline-primary dropdown-toggle" type="button" id="userDropdown" data-bs-toggle="dropdown" aria-expanded="false">
                                Welcome, @GetUserFullName(context.User)
                            </button>
                            <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="userDropdown">
                                <li><a class="dropdown-item" href="account/profile">My Profile</a></li>
                                <li><hr class="dropdown-divider"></li>
                                <li><a class="dropdown-item text-danger" href="logout">Logout</a></li>
                            </ul>
                        </div>
                    </Authorized>
                    <NotAuthorized>
                        <a href="login" class="btn btn-outline-primary me-2">Login</a>
                        <a href="register" class="btn btn-primary">Register</a>
                    </NotAuthorized>
                </AuthorizeView>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

<script src="~/js/petSelection.js"></script>

@code {
    private string GetUserFullName(System.Security.Claims.ClaimsPrincipal user)
    {
        try
        {
            var userId = user.FindFirst(System.Security.Claims.ClaimTypes.NameIdentifier)?.Value;
            if (!string.IsNullOrEmpty(userId))
            {
                var appUser = DbContext.Users.FirstOrDefault(u => u.Id == userId);
                if (appUser != null)
                {
                    return $"{appUser.FirstName} {appUser.LastName}";
                }
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error getting user full name: {ex.Message}");
        }
        
        // Fallback to identity name if something went wrong
        return user.Identity?.Name ?? "User";
    }
}
